using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using System.Drawing.Design;
using System.Text.Json;
using System.Text.Json.Serialization;
using Ephemera.NBagOfTricks;
using Ephemera.NBagOfTricks.Slog;
using Ephemera.NBagOfUis;


namespace Embuddy
{
    class TraceRecord
    {
        public int MessageNumber { get; set; } = 0;
        public float TimeOffset { get; set; } = 0;
        public string Type { get; set; } = "??";
        public uint ID { get; set; } = 0;
        public List<byte> DataBytes { get; set; } = new();

        public static TraceRecord? Parse(string s)
        {
            TraceRecord trec = null;

            try
            {
                var parts = s.SplitByTokens(" )");

                if (parts.Count >= 5)
                {
                    trec = new();
                    trec.MessageNumber = int.Parse(parts[0]);
                    trec.TimeOffset = float.Parse(parts[1]);
                    trec.Type = parts[2];
                    trec.ID = uint.Parse(parts[3], System.Globalization.NumberStyles.HexNumber);
                    int dataLen = int.Parse(parts[4]);

                    for (int i = 0; i < parts.Count - 5 && i < dataLen; i++)
                    {
                        trec.DataBytes.Add(byte.Parse(parts[5 + i], System.Globalization.NumberStyles.HexNumber));
                    }
                }
                //else TODO?
            }
            catch (Exception e)
            {
                trec = null;
            }

            return trec;
        }
    }

    partial class MainForm
    {

        ////////////////// DEV STUFF //////////////////////

        void Debug_Click(object sender, EventArgs e)
        {
            tvTraffic.Clear();

            DoTraceFile();

            //DoChecksum();

            //File.ReadAllLines(@"C:\Dev\repos\Embuddy\files\some.txt").ForEach(l => tvTraffic.AppendLine(l));
        }


        void DoTraceFile()
        {

            //;$FILEVERSION=1.1
            //;$STARTTIME=44972.5746762732
            //;
            //;   E:\tr2.trc
            //;
            //;   Start time: 2/15/2023 13:47:32.030.0
            //;   Generated by PCAN-View v4.2.5.569
            //;
            //;   Message Number
            //;   |         Time Offset (ms)
            //;   |         |        Type
            //;   |         |        |        ID (hex)
            //;   |         |        |        |     Data Length
            //;   |         |        |        |     |   Data Bytes (hex) ...
            //;   |         |        |        |     |   |
            //;---+--   ----+----  --+--  ----+---  +  -+ -- -- -- -- -- -- --
            //     1)      2700.4  Rx         000A  8  BE 00 00 00 00 00 00 00 
            //     2)      3585.3  Rx         0000  8  08 00 00 00 00 00 00 00 
            //     3)      3585.5  Rx         0010  8  01 00 00 00 00 00 00 00 
            //     4)      3596.3  Rx         0011  8  00 00 00 00 00 00 00 00 
            //     5)      3596.6  Rx         0012  8  30 31 32 33 34 35 36 37 
            //     6)      3607.4  Rx         0012  8  38 39 FF FF FF FF FF FF 
            //     7)      3618.4  Rx         0012  8  FF FF FF FF FF FF FF FF 
            //     8)      3629.4  Rx         0012  8  FF FF FF FF FF FF FF FF 
            //     9)      3640.4  Rx         0012  8  FF FF FF FF FF FF FF FF 
            //    10)      3651.3  Rx         0012  8  FF FF FF FF FF FF FF FF 
            //;......
            //  1121)    768899.3  Rx         000A  8  09 00 00 00 00 00 00 00 
            //  1122)    778899.5  Rx         000A  8  0A 00 00 00 00 00 00 00 
            //  1123)    780193.5  Rx         01A1  8  F2 02 00 00 C6 CD FF FF 
            //  1124)    788899.7  Rx         000A  8  0B 00 00 00 00 00 00 00 
            //  1125)    798900.0  Rx         000A  8  0C 00 00 00 00 00 00 00 
            //  1126)    808900.2  Rx         000A  8  0D 00 00 00 00 00 00 00 


            List<TraceRecord> recs = new();

            var ls = File.ReadAllLines(@"C:\Dev\repos\Embuddy\files\test1.trc");

            foreach (var l in ls)
            {
                TraceRecord? rec = TraceRecord.Parse(l);
                if (rec is not null)
                {
                    recs.Add(rec);
                }
            }
        }

        void DoChecksum()
        {
            //- bins\dummy5120.bin has 5120 bytes = 1280 uint = 640 msg/block = 2.5 pages
            //- TBD> Num:5120 Chk1:83178260 Chk2:40 XOR:0 
            //- bins\dummy5121.bin has 5121 bytes = 1281 uint = 640 msg/block = 2.5 pages
            //- TBD> Num:5121 Chk1:83178281 Chk2:61 XOR:21
            //- agg rounds up to 3 pages = 6144 bytes = 1536 uint = 768 msg

            byte[] data = File.ReadAllBytes(@"C:\Dev\repos\Embuddy\files\dummy5120.bin");


            var numBytes = data.Length;
            // Pad.
            while(numBytes % 4 != 0) numBytes++;
            byte[] data2 = new byte[numBytes];
            byte[] xors = new byte[numBytes];
            data.CopyTo(data2, 0);

            byte chk_xor = 0;
            uint chk_add1 = 0;
            byte chk_add2 = 0;

            // Simple int add chksum.
            for (int i = 0; i < data2.Length; i += 4)
            {
                uint w = data2[i];
                w += (uint)(data2[i + 1]) << 8;
                w += (uint)(data2[i + 2]) << 16;
                w += ((uint)data2[i + 3]) << 24;
                chk_add1 += w;
            }

            // Simple byte add chksum.
            for (int i = 0; i < data2.Length; i++)
            {
                chk_add2 += data2[i];
            }

            // XOR
            //for each byte b in the buffer do
            //   lrc:= (lrc + b) and 0xFF
            //lrc:= (((lrc XOR 0xFF) +1) and 0xFF)
            for (int i = 0; i < data2.Length; i++)
            {
                //chk_xor ^= data2[i];
                xors[i] = chk_xor;
            }

            //string formatString = String.Format("{0,10:G}: {0,10:X}", value);

            string msg = $"Num:{data.Length} Chk1:{chk_add1:X} Chk2:{chk_add2:X} XOR:{chk_xor:X}";
            tvTraffic.AppendLine(msg);
        }

        void Fill()
        {
            tvTraffic.Clear();

            var ls = File.ReadAllLines(@"C:\Dev\repos\Embuddy\some.txt");

            foreach (var l in ls)
            {
                tvTraffic.AppendText($"> {l}{Environment.NewLine}");
            }
        }
    }
}
